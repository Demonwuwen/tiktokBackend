// Code generated by hertz generator.

package tiktokBackend

import (
	tiktokBackend "Demonwuwen/tiktokBackend/cmd/api/biz/model/tiktokBackend"
	"Demonwuwen/tiktokBackend/cmd/api/biz/model/tiktokapi"
	"Demonwuwen/tiktokBackend/cmd/api/biz/mw"
	"Demonwuwen/tiktokBackend/cmd/api/biz/rpc"
	"Demonwuwen/tiktokBackend/kitex_gen/user"
	"Demonwuwen/tiktokBackend/pkg/errno"
	"context"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"reflect"
	"strconv"
)

// UserRegister .
// @router /douyin/user/register [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	fmt.Println("router: in register flow~~~")
	var err error
	var req tiktokapi.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp, err := rpc.RegisterUser(ctx, &user.UserRegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		c.JSON(consts.StatusOK, &user.UserRegisterResponse{
			StatusCode: errno.AuthorizationFailedErr.ErrCode,
			StatusMsg:  errno.AuthorizationFailedErr.ErrMsg,
			UserId:     0,
			Token:      "",
		})
		return
	}

	if resp.StatusCode != 0 {
		c.JSON(consts.StatusOK, &resp)
		return
	}

	fmt.Println("reflect.TypeOf(resp)", reflect.TypeOf(resp))
	fmt.Println("reflect.TypeOf(resp.UserId)", reflect.TypeOf(resp.UserId))

	token, _, err := mw.JwtMiddleware.TokenGenerator(resp.UserId)
	if err != nil {
		fmt.Println("token generate failed ")
		return
	}

	fmt.Println("token generate success,token = ", token)

	resp.Token = token
	c.JSON(consts.StatusOK, &resp)
}

// UserLogin .
// @router /douyin/user/login [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	fmt.Println("in login flow")
	var err error
	var req tiktokapi.UserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	mw.JwtMiddleware.LoginHandler(ctx, c)

}

// UserGet .
// @router /douyin/user [GET]
func UserGet(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokapi.UserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	userId, err := strconv.Atoi(c.Query("user_id"))
	//userId := c.Query("user_id")
	//token := c.Query("token")

	resp, err := rpc.GetUser(ctx, &user.UserRequest{
		UserId: int64(userId),
		//Token:  token,
	})
	if err != nil {
		//err
		c.JSON(consts.StatusOK, utils.H{
			"err": err,
		})
	}
	//resp := new(tiktokapi.UserResponse)

	c.JSON(consts.StatusOK, resp)
}

// PublishVideo .
// @router /douyin/publish/action [POST]
func PublishVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokapi.PublishActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokapi.PublishActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// PublishList .
// @router /douyin/publish/list [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokapi.PublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokapi.PublishListResponse)

	c.JSON(consts.StatusOK, resp)
}

// Feed .
// @router /douyin/feed [GET]
func Feed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokapi.FeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokapi.FeedResponse)

	c.JSON(consts.StatusOK, resp)
}

// FavoriteAct .
// @router /douyin/favorite/action [POST]
func FavoriteAct(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokapi.FavoriteActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokapi.FavoriteActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// FavoriteList .
// @router /douyin/favorite/list [GET]
func FavoriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokapi.FavoriteListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokapi.FavoriteListResponse)

	c.JSON(consts.StatusOK, resp)
}

// CommentAct .
// @router /douyin/comment/action [POST]
func CommentAct(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokapi.CommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokapi.CommentActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// CommentList .
// @router /douyin/comment/list [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokapi.CommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokapi.CommentListResponse)

	c.JSON(consts.StatusOK, resp)
}

// RelationAct .
// @router /douyin/relation/action [POST]
func RelationAct(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokapi.RelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokapi.RelationActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// FriendList .
// @router /douyin/relation/friend/list [GET]
func FriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokBackend.FriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokBackend.FriendListResponse)

	c.JSON(consts.StatusOK, resp)
}

// FollowList .
// @router /douyin/relation/follow/list [GET]
func FollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokBackend.FollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokBackend.FollowListResponse)

	c.JSON(consts.StatusOK, resp)
}

// FollowerList .
// @router /douyin/relation/follower/list [GET]
func FollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokBackend.FollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokBackend.FollowerListResponse)

	c.JSON(consts.StatusOK, resp)
}
