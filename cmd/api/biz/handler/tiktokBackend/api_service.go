// Code generated by hertz generator.

package tiktokBackend

import (
	"context"

	tiktokBackend "Demonwuwen/tiktokBackend/cmd/api/biz/model/tiktokBackend"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UserRegister .
// @router /douyin/user/register [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokBackend.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokBackend.UserRegisterResponse)

	c.JSON(consts.StatusOK, resp)
}

// UserLogin .
// @router /douyin/user/login [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokBackend.UserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokBackend.UserLoginResponse)

	c.JSON(consts.StatusOK, resp)
}

// UserGet .
// @router /douyin/user [GET]
func UserGet(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokBackend.UserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokBackend.UserResponse)

	c.JSON(consts.StatusOK, resp)
}

// PublishVideo .
// @router /douyin/publish/action [POST]
func PublishVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokBackend.PublishActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokBackend.PublishActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// PublishList .
// @router /douyin/publish/list [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokBackend.PublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokBackend.PublishListResponse)

	c.JSON(consts.StatusOK, resp)
}

// Feed .
// @router /douyin/feed [GET]
func Feed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokBackend.FeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokBackend.FeedResponse)

	c.JSON(consts.StatusOK, resp)
}

// FavoriteAct .
// @router /douyin/favorite/action [POST]
func FavoriteAct(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokBackend.FavoriteActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokBackend.FavoriteActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// FavoriteList .
// @router /douyin/favorite/list [GET]
func FavoriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokBackend.FavoriteListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokBackend.FavoriteListResponse)

	c.JSON(consts.StatusOK, resp)
}

// CommentAct .
// @router /douyin/comment/action [POST]
func CommentAct(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokBackend.CommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokBackend.CommentActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// CommentList .
// @router /douyin/comment/list [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokBackend.CommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokBackend.CommentListResponse)

	c.JSON(consts.StatusOK, resp)
}

// RelationAct .
// @router /douyin/relation/action [POST]
func RelationAct(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokBackend.RelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokBackend.RelationActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// FowllowList .
// @router /douyin/relation/follower/list [GET]
func FowllowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokBackend.FollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokBackend.FollowListResponse)

	c.JSON(consts.StatusOK, resp)
}

// FowllowerList .
// @router /douyin/relation/follower/list [GET]
func FowllowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokBackend.FollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokBackend.FollowerListResponse)

	c.JSON(consts.StatusOK, resp)
}

// FrientList .
// @router /douyin/relation/follower/list [GET]
func FrientList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokBackend.FriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokBackend.FriendListResponse)

	c.JSON(consts.StatusOK, resp)
}
