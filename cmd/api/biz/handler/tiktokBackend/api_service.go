// Code generated by hertz generator.

package tiktokBackend

import (
	"Demonwuwen/tiktokBackend/cmd/api/biz/model/tiktokapi"
	"Demonwuwen/tiktokBackend/cmd/api/biz/mw"
	"Demonwuwen/tiktokBackend/cmd/api/biz/rpc"
	"Demonwuwen/tiktokBackend/kitex_gen/user"
	"Demonwuwen/tiktokBackend/pkg/errno"
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UserRegister .
// @router /douyin/user/register [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokapi.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	userId, err := rpc.RegisterUser(ctx, &user.UserRegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})

	if err != nil {
		c.JSON(consts.StatusOK, &user.UserRegisterResponse{
			StatusCode: errno.AuthorizationFailedErr.ErrCode,
			StatusMsg:  &errno.AuthorizationFailedErr.ErrMsg,
			UserId:     0,
			Token:      "",
		})
		return
	}

	c.JSON(consts.StatusOK, &user.UserRegisterResponse{
		StatusCode: errno.Success.ErrCode,
		StatusMsg:  &errno.Success.ErrMsg,
		UserId:     userId,
		Token:      "",
	})
}

// UserLogin .
// @router /douyin/user/login [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokapi.UserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	mw.JwtMiddleware.LoginHandler(ctx, c)

}

// UserGet .
// @router /douyin/user [GET]
func UserGet(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokapi.UserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokapi.UserResponse)

	c.JSON(consts.StatusOK, resp)
}

// PublishVideo .
// @router /douyin/publish/action [POST]
func PublishVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokapi.PublishActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokapi.PublishActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// PublishList .
// @router /douyin/publish/list [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokapi.PublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokapi.PublishListResponse)

	c.JSON(consts.StatusOK, resp)
}

// Feed .
// @router /douyin/feed [GET]
func Feed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokapi.FeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokapi.FeedResponse)

	c.JSON(consts.StatusOK, resp)
}

// FavoriteAct .
// @router /douyin/favorite/action [POST]
func FavoriteAct(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokapi.FavoriteActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokapi.FavoriteActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// FavoriteList .
// @router /douyin/favorite/list [GET]
func FavoriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokapi.FavoriteListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokapi.FavoriteListResponse)

	c.JSON(consts.StatusOK, resp)
}

// CommentAct .
// @router /douyin/comment/action [POST]
func CommentAct(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokapi.CommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokapi.CommentActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// CommentList .
// @router /douyin/comment/list [GET]
func CommentList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokapi.CommentListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokapi.CommentListResponse)

	c.JSON(consts.StatusOK, resp)
}

// RelationAct .
// @router /douyin/relation/action [POST]
func RelationAct(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokapi.RelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokapi.RelationActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// FowllowList .
// @router /douyin/relation/follow/list [GET]
func FowllowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokapi.FollowListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokapi.FollowListResponse)

	c.JSON(consts.StatusOK, resp)
}

// FowllowerList .
// @router /douyin/relation/follower/list [GET]
func FowllowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokapi.FollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokapi.FollowerListResponse)

	c.JSON(consts.StatusOK, resp)
}

// FrientList .
// @router /douyin/relation/friend/list [GET]
func FrientList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokapi.FriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokapi.FriendListResponse)

	c.JSON(consts.StatusOK, resp)
}
