// Code generated by hertz generator.

package tiktokBackendBase

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	tiktokBackendBase "tiktokBackendBase"
)

// UserRegister .
// @router /douyin/user/register [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokBackendBase.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokBackendBase.UserRegisterResponse)

	c.JSON(consts.StatusOK, resp)
}

// UserLogin .
// @router /douyin/user/login [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokBackendBase.UserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokBackendBase.UserLoginResponse)

	c.JSON(consts.StatusOK, resp)
}

// UserGet .
// @router /douyin/user [POST]
func UserGet(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokBackendBase.UserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokBackendBase.UserResponse)

	c.JSON(consts.StatusOK, resp)
}

// PublishVideo .
// @router /douyin/publish/action [GET]
func PublishVideo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokBackendBase.PublishActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokBackendBase.PublishActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// PublishList .
// @router /douyin/publish/list [PUT]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokBackendBase.PublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokBackendBase.PublishListResponse)

	c.JSON(consts.StatusOK, resp)
}

// Feed .
// @router /douyin/feed [DELETE]
func Feed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req tiktokBackendBase.FeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(tiktokBackendBase.FeedResponse)

	c.JSON(consts.StatusOK, resp)
}
