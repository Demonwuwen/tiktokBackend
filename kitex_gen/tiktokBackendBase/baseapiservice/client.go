// Code generated by Kitex v0.4.4. DO NOT EDIT.

package baseapiservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	tiktokbackendbase "github.com/demonwuwen/tiktokBackend/kitex_gen/tiktokBackendBase"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	UserRegister(ctx context.Context, req *tiktokbackendbase.UserRegisterRequest, callOptions ...callopt.Option) (r *tiktokbackendbase.UserRegisterResponse, err error)
	UserLogin(ctx context.Context, req *tiktokbackendbase.UserLoginRequest, callOptions ...callopt.Option) (r *tiktokbackendbase.UserLoginResponse, err error)
	UserGet(ctx context.Context, req *tiktokbackendbase.UserRequest, callOptions ...callopt.Option) (r *tiktokbackendbase.UserResponse, err error)
	PublishVideo(ctx context.Context, req *tiktokbackendbase.PublishActionRequest, callOptions ...callopt.Option) (r *tiktokbackendbase.PublishActionResponse, err error)
	PublishList(ctx context.Context, req *tiktokbackendbase.PublishListRequest, callOptions ...callopt.Option) (r *tiktokbackendbase.PublishListResponse, err error)
	DeleteNote(ctx context.Context, req *tiktokbackendbase.FeedRequest, callOptions ...callopt.Option) (r *tiktokbackendbase.FeedResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kBaseApiServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kBaseApiServiceClient struct {
	*kClient
}

func (p *kBaseApiServiceClient) UserRegister(ctx context.Context, req *tiktokbackendbase.UserRegisterRequest, callOptions ...callopt.Option) (r *tiktokbackendbase.UserRegisterResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UserRegister(ctx, req)
}

func (p *kBaseApiServiceClient) UserLogin(ctx context.Context, req *tiktokbackendbase.UserLoginRequest, callOptions ...callopt.Option) (r *tiktokbackendbase.UserLoginResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UserLogin(ctx, req)
}

func (p *kBaseApiServiceClient) UserGet(ctx context.Context, req *tiktokbackendbase.UserRequest, callOptions ...callopt.Option) (r *tiktokbackendbase.UserResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UserGet(ctx, req)
}

func (p *kBaseApiServiceClient) PublishVideo(ctx context.Context, req *tiktokbackendbase.PublishActionRequest, callOptions ...callopt.Option) (r *tiktokbackendbase.PublishActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PublishVideo(ctx, req)
}

func (p *kBaseApiServiceClient) PublishList(ctx context.Context, req *tiktokbackendbase.PublishListRequest, callOptions ...callopt.Option) (r *tiktokbackendbase.PublishListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PublishList(ctx, req)
}

func (p *kBaseApiServiceClient) DeleteNote(ctx context.Context, req *tiktokbackendbase.FeedRequest, callOptions ...callopt.Option) (r *tiktokbackendbase.FeedResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteNote(ctx, req)
}
