// Code generated by Kitex v0.4.4. DO NOT EDIT.

package baseapiservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	tiktokbackendbase "github.com/demonwuwen/tiktokBackend/kitex_gen/tiktokBackendBase"
)

func serviceInfo() *kitex.ServiceInfo {
	return baseApiServiceServiceInfo
}

var baseApiServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "BaseApiService"
	handlerType := (*tiktokbackendbase.BaseApiService)(nil)
	methods := map[string]kitex.MethodInfo{
		"UserRegister": kitex.NewMethodInfo(userRegisterHandler, newBaseApiServiceUserRegisterArgs, newBaseApiServiceUserRegisterResult, false),
		"UserLogin":    kitex.NewMethodInfo(userLoginHandler, newBaseApiServiceUserLoginArgs, newBaseApiServiceUserLoginResult, false),
		"UserGet":      kitex.NewMethodInfo(userGetHandler, newBaseApiServiceUserGetArgs, newBaseApiServiceUserGetResult, false),
		"PublishVideo": kitex.NewMethodInfo(publishVideoHandler, newBaseApiServicePublishVideoArgs, newBaseApiServicePublishVideoResult, false),
		"PublishList":  kitex.NewMethodInfo(publishListHandler, newBaseApiServicePublishListArgs, newBaseApiServicePublishListResult, false),
		"DeleteNote":   kitex.NewMethodInfo(deleteNoteHandler, newBaseApiServiceDeleteNoteArgs, newBaseApiServiceDeleteNoteResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "tiktokbackendbase",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func userRegisterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*tiktokbackendbase.BaseApiServiceUserRegisterArgs)
	realResult := result.(*tiktokbackendbase.BaseApiServiceUserRegisterResult)
	success, err := handler.(tiktokbackendbase.BaseApiService).UserRegister(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseApiServiceUserRegisterArgs() interface{} {
	return tiktokbackendbase.NewBaseApiServiceUserRegisterArgs()
}

func newBaseApiServiceUserRegisterResult() interface{} {
	return tiktokbackendbase.NewBaseApiServiceUserRegisterResult()
}

func userLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*tiktokbackendbase.BaseApiServiceUserLoginArgs)
	realResult := result.(*tiktokbackendbase.BaseApiServiceUserLoginResult)
	success, err := handler.(tiktokbackendbase.BaseApiService).UserLogin(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseApiServiceUserLoginArgs() interface{} {
	return tiktokbackendbase.NewBaseApiServiceUserLoginArgs()
}

func newBaseApiServiceUserLoginResult() interface{} {
	return tiktokbackendbase.NewBaseApiServiceUserLoginResult()
}

func userGetHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*tiktokbackendbase.BaseApiServiceUserGetArgs)
	realResult := result.(*tiktokbackendbase.BaseApiServiceUserGetResult)
	success, err := handler.(tiktokbackendbase.BaseApiService).UserGet(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseApiServiceUserGetArgs() interface{} {
	return tiktokbackendbase.NewBaseApiServiceUserGetArgs()
}

func newBaseApiServiceUserGetResult() interface{} {
	return tiktokbackendbase.NewBaseApiServiceUserGetResult()
}

func publishVideoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*tiktokbackendbase.BaseApiServicePublishVideoArgs)
	realResult := result.(*tiktokbackendbase.BaseApiServicePublishVideoResult)
	success, err := handler.(tiktokbackendbase.BaseApiService).PublishVideo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseApiServicePublishVideoArgs() interface{} {
	return tiktokbackendbase.NewBaseApiServicePublishVideoArgs()
}

func newBaseApiServicePublishVideoResult() interface{} {
	return tiktokbackendbase.NewBaseApiServicePublishVideoResult()
}

func publishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*tiktokbackendbase.BaseApiServicePublishListArgs)
	realResult := result.(*tiktokbackendbase.BaseApiServicePublishListResult)
	success, err := handler.(tiktokbackendbase.BaseApiService).PublishList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseApiServicePublishListArgs() interface{} {
	return tiktokbackendbase.NewBaseApiServicePublishListArgs()
}

func newBaseApiServicePublishListResult() interface{} {
	return tiktokbackendbase.NewBaseApiServicePublishListResult()
}

func deleteNoteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*tiktokbackendbase.BaseApiServiceDeleteNoteArgs)
	realResult := result.(*tiktokbackendbase.BaseApiServiceDeleteNoteResult)
	success, err := handler.(tiktokbackendbase.BaseApiService).DeleteNote(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseApiServiceDeleteNoteArgs() interface{} {
	return tiktokbackendbase.NewBaseApiServiceDeleteNoteArgs()
}

func newBaseApiServiceDeleteNoteResult() interface{} {
	return tiktokbackendbase.NewBaseApiServiceDeleteNoteResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UserRegister(ctx context.Context, req *tiktokbackendbase.UserRegisterRequest) (r *tiktokbackendbase.UserRegisterResponse, err error) {
	var _args tiktokbackendbase.BaseApiServiceUserRegisterArgs
	_args.Req = req
	var _result tiktokbackendbase.BaseApiServiceUserRegisterResult
	if err = p.c.Call(ctx, "UserRegister", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserLogin(ctx context.Context, req *tiktokbackendbase.UserLoginRequest) (r *tiktokbackendbase.UserLoginResponse, err error) {
	var _args tiktokbackendbase.BaseApiServiceUserLoginArgs
	_args.Req = req
	var _result tiktokbackendbase.BaseApiServiceUserLoginResult
	if err = p.c.Call(ctx, "UserLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserGet(ctx context.Context, req *tiktokbackendbase.UserRequest) (r *tiktokbackendbase.UserResponse, err error) {
	var _args tiktokbackendbase.BaseApiServiceUserGetArgs
	_args.Req = req
	var _result tiktokbackendbase.BaseApiServiceUserGetResult
	if err = p.c.Call(ctx, "UserGet", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishVideo(ctx context.Context, req *tiktokbackendbase.PublishActionRequest) (r *tiktokbackendbase.PublishActionResponse, err error) {
	var _args tiktokbackendbase.BaseApiServicePublishVideoArgs
	_args.Req = req
	var _result tiktokbackendbase.BaseApiServicePublishVideoResult
	if err = p.c.Call(ctx, "PublishVideo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishList(ctx context.Context, req *tiktokbackendbase.PublishListRequest) (r *tiktokbackendbase.PublishListResponse, err error) {
	var _args tiktokbackendbase.BaseApiServicePublishListArgs
	_args.Req = req
	var _result tiktokbackendbase.BaseApiServicePublishListResult
	if err = p.c.Call(ctx, "PublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteNote(ctx context.Context, req *tiktokbackendbase.FeedRequest) (r *tiktokbackendbase.FeedResponse, err error) {
	var _args tiktokbackendbase.BaseApiServiceDeleteNoteArgs
	_args.Req = req
	var _result tiktokbackendbase.BaseApiServiceDeleteNoteResult
	if err = p.c.Call(ctx, "DeleteNote", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
